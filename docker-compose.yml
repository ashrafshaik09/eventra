networks:
  evently-network:
    name: evently-network
    driver: bridge

services:
  # Redis for Caching and Distributed Operations
  redis:
    image: redis:7-alpine
    container_name: evently_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - evently-network

  # Kafka with KRaft Mode (No Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: evently_kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft configuration (modern Kafka without Zookeeper)
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_NODE_ID: 1
      
      # Process roles - combined mode for development
      KAFKA_PROCESS_ROLES: 'broker,controller'
      
      # Listener configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      
      # Storage configuration
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      
      # Replication factors for single node
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      # Topic configuration
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      
      # Performance and retention
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      
      # JVM settings for development
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - evently-network

  # Kafka UI for development (optional but very helpful)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: evently_kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
    networks:
      - evently-network

  # Redis Commander (Optional - Redis Management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: evently_redis_commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - evently-network

  # MailHog for email testing (catches emails in development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: evently_mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - evently-network

volumes:
  redis_data:
    driver: local
  kafka_data:
    driver: local