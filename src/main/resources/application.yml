server:
  port: ${SERVER_PORT:8080}

spring:
  # ========== DATABASE CONFIGURATION ==========
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/evently-db}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:klu@321}
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: EventlyHikariPool
      maximum-pool-size: ${DATABASE_POOL_SIZE:50}
      minimum-idle: ${DATABASE_MIN_IDLE:10}
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000
      connection-test-query: SELECT 1
      auto-commit: false

  # ========== JPA/HIBERNATE CONFIGURATION ==========
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
    "open-in-view": false

  # ========== REDIS CONFIGURATION ==========
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:2000}ms
      lettuce:
        pool:
          "max-active": ${REDIS_POOL_MAX_ACTIVE:50}
          "max-idle": 10
          "min-idle": 5
          "max-wait": 2000ms

  # ========== CACHE CONFIGURATION ==========
  cache:
    type: redis
    redis:
      "time-to-live": ${EVENTLY_CACHE_DEFAULT_TTL:300000}
      "cache-null-values": false

  # ========== FLYWAY CONFIGURATION ==========
  flyway:
    enabled: true
    locations: classpath:db/migration
    "baseline-on-migrate": true
    mixed: true
    "validate-on-migrate": true

  # ========== KAFKA CONFIGURATION ==========
  kafka:
    "bootstrap-servers": ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      "group-id": ${KAFKA_CONSUMER_GROUP_ID:evently-consumer-group}
      "auto-offset-reset": earliest
      "enable-auto-commit": false
      "key-deserializer": org.apache.kafka.common.serialization.StringDeserializer
      "value-deserializer": org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        "[spring.json.trusted.packages]": "com.atlan.evently.dto,com.atlan.evently.event"
        "[isolation.level]": read_committed
        "[max.poll.records]": 100
        "[fetch.min.bytes]": 1024
    producer:
      "key-serializer": org.apache.kafka.common.serialization.StringSerializer
      "value-serializer": org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        "[linger.ms]": 5
        "[batch.size]": 16384
        "[compression.type]": lz4
        "[enable.idempotence]": true
    listener:
      "ack-mode": manual
      concurrency: 3

  # ========== MAIL CONFIGURATION ==========
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS:false}
        debug: false

  # ========== SECURITY CONFIGURATION ==========
  security:
    jwt:
      secret: ${JWT_SECRET_KEY:dev_secret_key_change_in_production}
      expiration-ms: ${JWT_EXPIRATION_MS:86400000}

  main:
    "banner-mode": off

# ========== EVENTLY APPLICATION CONFIGURATION ==========
evently:
  # Cache Configuration
  cache:
    events:
      ttl: ${EVENTLY_CACHE_EVENTS_TTL:300}
    "event-details":
      ttl: ${EVENTLY_CACHE_EVENT_DETAILS_TTL:600}

  # Booking Configuration
  booking:
    "max-tickets-per-request": ${EVENTLY_BOOKING_MAX_TICKETS:10}
    "cancellation-deadline-hours": ${EVENTLY_BOOKING_CANCELLATION_DEADLINE_HOURS:2}

  # Waitlist Configuration
  waitlist:
    "booking-window-minutes": ${EVENTLY_WAITLIST_BOOKING_WINDOW_MINUTES:10}
    "max-position": ${EVENTLY_WAITLIST_MAX_POSITION:100}
    "cleanup-interval-minutes": 5

  # Notification Configuration
  notifications:
    enabled: true
    email:
      "from-address": ${EVENTLY_EMAIL_FROM_ADDRESS:noreply@evently.com}
      "from-name": ${EVENTLY_EMAIL_FROM_NAME:Evently Platform}

  # Security Configuration
  security:
    "admin-token": ${ADMIN_TOKEN:admin-secret}
    "cors-allowed-origins": ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}

# ========== ACTUATOR/MONITORING CONFIGURATION ==========
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS:health,info,metrics,prometheus,caches,configprops}
  endpoint:
    health:
      "show-details": when_authorized
    metrics:
      enabled: ${METRICS_ENABLED:true}
  prometheus:
    metrics:
      export:
        enabled: ${METRICS_ENABLED:true}
  info:
    env:
      enabled: true

# ========== LOGGING CONFIGURATION ==========
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    "[com.atlan.evently]": ${LOG_LEVEL_EVENTLY:INFO}
    "[org.springframework.cache]": ${LOG_LEVEL_CACHE:INFO}
    "[org.springframework.kafka]": ${LOG_LEVEL_KAFKA:INFO}
    "[com.zaxxer.hikari]": ${LOG_LEVEL_HIKARI:INFO}
    "[org.springframework.security]": ${LOG_LEVEL_SECURITY:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n"

---

# ========== PRODUCTION PROFILE ==========
spring:
  config:
    activate:
      "on-profile": production

  datasource:
    hikari:
      "maximum-pool-size": ${DATABASE_POOL_SIZE:100}
      "minimum-idle": ${DATABASE_MIN_IDLE:20}
      "leak-detection-threshold": 30000

  data:
    redis:
      lettuce:
        pool:
          "max-active": ${REDIS_POOL_MAX_ACTIVE:100}
          "max-idle": 20

  cache:
    redis:
      "time-to-live": 600000

  flyway:
    mixed: true
    "out-of-order": false
    "validate-on-migrate": true

  # Production Security
  security:
    require-ssl: true

logging:
  level:
    root: ${LOG_LEVEL_ROOT:WARN}
    "[com.atlan.evently]": ${LOG_LEVEL_EVENTLY:INFO}
  file:
    name: logs/evently.log

---

# ========== DEVELOPMENT PROFILE ==========
spring:
  config:
    activate:
      "on-profile": development

  jpa:
    properties:
      hibernate:
        show_sql: ${LOG_LEVEL_SQL:false}
        format_sql: true

  flyway:
    "clean-disabled": false

logging:
  level:
    "[com.atlan.evently]": ${LOG_LEVEL_EVENTLY:DEBUG}
    "[org.springframework.cache]": DEBUG
    "[org.springframework.kafka]": DEBUG
    "[org.springframework]": INFO
    "[org.hibernate]": INFO

---

# ========== TEST PROFILE ==========
spring:
  config:
    activate:
      "on-profile": test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect

  flyway:
    enabled: false

  cache:
    type: simple

  kafka:
    "bootstrap-servers": ${spring.embedded.kafka.brokers}

logging:
  level:
    "[com.atlan.evently]": DEBUG

