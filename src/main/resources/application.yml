server:
  port: ${SERVER_PORT:8080}

spring:
  main:
    banner-mode: off

  # ========== COMMON DATASOURCE PLACEHOLDERS ==========
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/evently-db}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:#{null}}
    driver-class-name: org.postgresql.Driver

  # ========== COMMON JPA / HIBERNATE ==========
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # ========== REDIS (common handling) ==========
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      # Treat empty REDIS_PASSWORD as null so client won't send AUTH with empty password
      # password: ${REDIS_PASSWORD:#{null}}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:2000}ms

  # ========== KAFKA ==========
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:evently-consumer-group}
    producer:
      properties:
        "[linger.ms]": 5
        "[batch.size]": 16384
        "[compression.type]": lz4
        "[enable.idempotence]": true
    listener:
      "ack-mode": manual
      concurrency: 3

  # ========== MAIL ==========
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    # username: ${MAIL_USERNAME:#{null}}
    # password: ${MAIL_PASSWORD:#{null}}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS:false}
        debug: false

# ========== CUSTOM APPLICATION PROPERTIES ==========
app:
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET_KEY:dev_secret_key_change_in_production}
    expiration-ms: ${JWT_EXPIRATION_MS:86400000}

# ========== APPLICATION (business) DEFAULTS ==========
evently:
  booking:
    max-tickets-per-request: ${EVENTLY_BOOKING_MAX_TICKETS:10}
    cancellation-deadline-hours: ${EVENTLY_BOOKING_CANCELLATION_DEADLINE_HOURS:2}
  waitlist:
    booking-window-minutes: ${EVENTLY_WAITLIST_BOOKING_WINDOW_MINUTES:10}
    max-position: ${EVENTLY_WAITLIST_MAX_POSITION:100}
    cleanup-interval-minutes: 5
  cache:
    events:
      ttl: ${EVENTLY_CACHE_EVENTS_TTL:300}
    event-details:
      ttl: ${EVENTLY_CACHE_EVENT_DETAILS_TTL:600}
  notifications:
    enabled: true
    email:
      from-address: ${EVENTLY_EMAIL_FROM_ADDRESS:noreply@evently.com}
      from-name: ${EVENTLY_EMAIL_FROM_NAME:Evently Platform}
  security:
    admin-token: ${ADMIN_TOKEN:admin-secret}
    cors-allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}

# ========== ACTUATOR / MONITORING DEFAULTS ==========
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS:health,info,metrics,prometheus,caches,configprops}
  endpoint:
    health:
      show-details: when_authorized
    metrics:
      export:
        enabled: ${METRICS_ENABLED:true}
  prometheus:
    metrics:
      export:
        enabled: ${METRICS_ENABLED:true}
  info:
    env:
      enabled: true

# ========== LOGGING DEFAULTS ==========
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    "[com.atlan.evently]": ${LOG_LEVEL_EVENTLY:INFO}
    "[org.springframework.cache]": ${LOG_LEVEL_CACHE:INFO}
    "[org.springframework.kafka]": ${LOG_LEVEL_KAFKA:INFO}
    "[com.zaxxer.hikari]": ${LOG_LEVEL_HIKARI:INFO}
    "[org.springframework.security]": ${LOG_LEVEL_SECURITY:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n"

---

# ========== PRODUCTION PROFILE ==========
spring:
  config:
    activate:
      on-profile: production

  datasource:
    hikari:
      maximum-pool-size: ${DATABASE_POOL_SIZE:100}
      minimum-idle: ${DATABASE_MIN_IDLE:20}
      leak-detection-threshold: 30000

  data:
    redis:
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:100}
          max-idle: 20

  cache:
    redis:
      time-to-live: 600000

  flyway:
    mixed: true
    out-of-order: false
    validate-on-migrate: true

  security:
    require-ssl: true

logging:
  level:
    root: ${LOG_LEVEL_ROOT:WARN}
    "[com.atlan.evently]": ${LOG_LEVEL_EVENTLY:INFO}
  file:
    name: logs/evently.log

---

# ========== DEVELOPMENT PROFILE ==========
spring:
  config:
    activate:
      on-profile: development

  jpa:
    properties:
      hibernate:
        show_sql: ${LOG_LEVEL_SQL:false}
        format_sql: true

  flyway:
    clean-disabled: false

logging:
  level:
    "[com.atlan.evently]": ${LOG_LEVEL_EVENTLY:DEBUG}
    "[org.springframework.cache]": DEBUG
    "[org.springframework.kafka]": DEBUG
    "[org.springframework]": INFO
    "[org.hibernate]": INFO

---

# ========== TEST PROFILE ==========
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  flyway:
    enabled: false

  cache:
    type: simple

  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers}

  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
    properties:
      hibernate:
        show_sql: ${LOG_LEVEL_SQL:false}
        format_sql: true

server:
  ssl:
    enabled: true
